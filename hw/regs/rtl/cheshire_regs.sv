// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module cheshire_regs (
        input wire clk,
        input wire arst_n,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [6:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input cheshire_regs_pkg::cheshire_regs__in_t hwif_in
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [6:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[6:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic scratch[16];
        logic boot_mode;
        logic rtc_freq;
        logic platform_rom;
        logic num_int_harts;
        logic hw_features;
        logic llc_size;
        logic vga_params;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        for(int i0=0; i0<16; i0++) begin
            decoded_reg_strb.scratch[i0] = cpuif_req_masked & (cpuif_addr == 7'h0 + (7)'(i0) * 7'h4);
        end
        decoded_reg_strb.boot_mode = cpuif_req_masked & (cpuif_addr == 7'h40);
        decoded_reg_strb.rtc_freq = cpuif_req_masked & (cpuif_addr == 7'h44);
        decoded_reg_strb.platform_rom = cpuif_req_masked & (cpuif_addr == 7'h48);
        decoded_reg_strb.num_int_harts = cpuif_req_masked & (cpuif_addr == 7'h4c);
        decoded_reg_strb.hw_features = cpuif_req_masked & (cpuif_addr == 7'h50);
        decoded_reg_strb.llc_size = cpuif_req_masked & (cpuif_addr == 7'h54);
        decoded_reg_strb.vga_params = cpuif_req_masked & (cpuif_addr == 7'h58);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } scratch;
        } scratch[16];
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [31:0] value;
            } scratch;
        } scratch[16];
    } field_storage_t;
    field_storage_t field_storage;

    for(genvar i0=0; i0<16; i0++) begin
        // Field: cheshire_regs.scratch[].scratch
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.scratch[i0].scratch.value;
            load_next_c = '0;
            if(decoded_reg_strb.scratch[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.scratch[i0].scratch.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.scratch[i0].scratch.next = next_c;
            field_combo.scratch[i0].scratch.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.scratch[i0].scratch.value <= 32'h0;
            end else begin
                if(field_combo.scratch[i0].scratch.load_next) begin
                    field_storage.scratch[i0].scratch.value <= field_combo.scratch[i0].scratch.next;
                end
            end
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[23];
    for(genvar i0=0; i0<16; i0++) begin
        assign readback_array[i0 * 1 + 0][31:0] = (decoded_reg_strb.scratch[i0] && !decoded_req_is_wr) ? field_storage.scratch[i0].scratch.value : '0;
    end
    assign readback_array[16][1:0] = (decoded_reg_strb.boot_mode && !decoded_req_is_wr) ? hwif_in.boot_mode.boot_mode.next : '0;
    assign readback_array[16][31:2] = '0;
    assign readback_array[17][31:0] = (decoded_reg_strb.rtc_freq && !decoded_req_is_wr) ? hwif_in.rtc_freq.ref_freq.next : '0;
    assign readback_array[18][31:0] = (decoded_reg_strb.platform_rom && !decoded_req_is_wr) ? hwif_in.platform_rom.platform_rom.next : '0;
    assign readback_array[19][31:0] = (decoded_reg_strb.num_int_harts && !decoded_req_is_wr) ? hwif_in.num_int_harts.num_harts.next : '0;
    assign readback_array[20][0:0] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.bootrom.next : '0;
    assign readback_array[20][1:1] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.llc.next : '0;
    assign readback_array[20][2:2] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.uart.next : '0;
    assign readback_array[20][3:3] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.spi_host.next : '0;
    assign readback_array[20][4:4] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.i2c.next : '0;
    assign readback_array[20][5:5] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.gpio.next : '0;
    assign readback_array[20][6:6] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.dma.next : '0;
    assign readback_array[20][7:7] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.serial_link.next : '0;
    assign readback_array[20][8:8] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.vga.next : '0;
    assign readback_array[20][9:9] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.usb.next : '0;
    assign readback_array[20][10:10] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.axirt.next : '0;
    assign readback_array[20][11:11] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.clic.next : '0;
    assign readback_array[20][12:12] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.irq_router.next : '0;
    assign readback_array[20][13:13] = (decoded_reg_strb.hw_features && !decoded_req_is_wr) ? hwif_in.hw_features.bus_err.next : '0;
    assign readback_array[20][31:14] = '0;
    assign readback_array[21][31:0] = (decoded_reg_strb.llc_size && !decoded_req_is_wr) ? hwif_in.llc_size.llc_size.next : '0;
    assign readback_array[22][7:0] = (decoded_reg_strb.vga_params && !decoded_req_is_wr) ? hwif_in.vga_params.red_width.next : '0;
    assign readback_array[22][15:8] = (decoded_reg_strb.vga_params && !decoded_req_is_wr) ? hwif_in.vga_params.green_width.next : '0;
    assign readback_array[22][23:16] = (decoded_reg_strb.vga_params && !decoded_req_is_wr) ? hwif_in.vga_params.blue_width.next : '0;
    assign readback_array[22][31:24] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<23; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
